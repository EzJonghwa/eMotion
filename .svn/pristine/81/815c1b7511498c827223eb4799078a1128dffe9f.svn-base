package com.eMotion.team.member.controller;

import java.util.HashMap;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.eMotion.team.member.service.MemberService;
import com.eMotion.team.member.vo.MemberVO;

@Controller
public class MemberController {
	
	@Autowired
	MemberService memberservice;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	
	// 회원가입 창 띄우기
	@RequestMapping("/registView")
	public String registView() {
		return "member/registView";
	}
	
	// 회원가입 실행
	@RequestMapping("/registDo")
	public String registDo(MemberVO vo) {
		
		vo.setPassword(passwordEncoder.encode(vo.getPassword()));
		System.out.println(vo);
		
		try {
			memberservice.registMember(vo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "member/registView";
	}
	
	// 로그인 창 띄우기
	@RequestMapping("/loginView")
	public String logibView() {
		return "member/loginView";
	}
	
	
	// 로그인 실행
	@RequestMapping("/loginDo")
	public String loginDo(MemberVO vo, boolean remember, HttpSession session, HttpServletResponse response) {
		
		System.out.println(vo);
		
		try {
			MemberVO login = memberservice.loginMember(vo);
			// 입력한 비밀번호와 db의 암호화된 비번 비교 일치하면 true, 그렇지 않으면 false 반환
			boolean match = passwordEncoder.matches(vo.getPassword(), login.getPassword());
			System.out.println(match);
			if(login == null || !match) {
				return "redirect:/loginView";
			}
			session.setAttribute("login", login);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "redirect:/loginView";
		
	}
	
	@RequestMapping(value="/kakaologin", method=RequestMethod.GET)
	public String kakaoLogin(@RequestParam(value = "code", required = false) String code, HttpSession session, MemberVO vo, Model model) throws Exception {
		
		System.out.println("#########" + code);
		
		// 위에서 만든 코드 아래에 코드 추가
		String access_Token = memberservice.kakaoGetAccessToken(code);
		System.out.println("###access_Token#### : " + access_Token);

		// 위에서 만든 코드 아래에 코드 추가
		HashMap<String, Object> userInfo = memberservice.kakaoGetUserInfo(access_Token);
		System.out.println("###nickName#### : " + userInfo.get("nickName"));
		System.out.println("###email#### : " + userInfo.get("email"));
		
		// 3. 세션에 저장
		session.setAttribute("userInfo", userInfo);
		
		// 4. Email 체크
	    String email = (String) userInfo.get("email");
	    
	    System.out.println(email);

	    if (email == null || email.isEmpty()) {
	        // 이메일이 없으면 회원가입 페이지로 이동
	    	return "redirect:/kakaoRegistView";
	    } else {
	        // 이메일이 있으면 로그인 로직 실행
	        vo.setEmail(email);
	        vo.setPassword(""); // 카카오 로그인은 비밀번호가 없으므로 기본값 설정

	        try {
	            MemberVO user = memberservice.kakaoLoginMember(vo);

	            if (user != null) {
	                session.setAttribute("loginUser", user);
	                return "redirect:/"; // 로그인 성공 후 메인 페이지로 리다이렉트
	            }
	        } catch (Exception e) {
	            System.out.println("로그인 실패: " + e.getMessage());
	        }

	        // DB에 정보가 없으면 회원가입 페이지로 이동
	        model.addAttribute("error", "로그인 실패: 계정이 존재하지 않습니다.");
	        
	        return "redirect:/kakaoRegistView";
	    }
    }
	
	@RequestMapping("/kakaoRegistView")
	public String kakaoRegistView(HttpSession session, Model model) {
	    // 에러 메시지가 있으면 모델에 추가
	    String errorMessage = (String) session.getAttribute("error");
	    if (errorMessage != null) {
	        model.addAttribute("error", errorMessage);
	        session.removeAttribute("error"); // 에러 메시지를 세션에서 제거
	    }
	    System.out.println("회원가입 페이지 이동");

	    return "member/kakaoRegistView";
	}
	
	
	@RequestMapping("/kakaoRegistDo")
	public String kakaoRegistDo(MemberVO vo) {
		
		System.out.println(vo);
		vo.setPassword(passwordEncoder.encode(vo.getPassword()));
		
		try {
			memberservice.kakaoRegistMember(vo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return "member/loginView";
	}
	
	// 아이디 중복체크
	@RequestMapping("/emailCheck")
	@ResponseBody
	public int emailCheck(@RequestParam("email") String email) {
		int cnt = memberservice.emailCheck(email);
		return cnt;
	}
	
	
}
