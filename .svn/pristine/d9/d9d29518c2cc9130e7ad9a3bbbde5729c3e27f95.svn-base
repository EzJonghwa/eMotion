
const TMAP_API_KEY = 'hK16EQ22PI8xceOsMCRZI6GSYMhAaI2s9pmKiS2M';


// 지도 초기화 함수
function initializeMap(mapId) {
    return new Tmapv2.Map(mapId, {
        center: new Tmapv2.LatLng(37.5665, 126.9780),
        width: "100%",
        height: "500px",
        zoom: 14,
    });
}

// 경로 계산 및 표시 함수
async function drawRoute(startLocation, endLocation, map, stationListId) {
    try {
        const startCoords = await getCoordinatesFromLocation(startLocation);
        const endCoords = await getCoordinatesFromLocation(endLocation);

        console.log(startLocation,endLocation);
        if (!startCoords || !endCoords) {
            alert("출발지와 도착지의 좌표를 가져올 수 없습니다.");
            return;
        }

        // 경로 그리기
        $.ajax({
            type: "POST",
            url: "https://apis.openapi.sk.com/tmap/routes?version=1",
            headers: { "appKey": TMAP_API_KEY },
            contentType: "application/json",
            data: JSON.stringify({
                startX: startCoords.lon, startY: startCoords.lat, 
                endX: endCoords.lon, endY: endCoords.lat,
                reqCoordType: "WGS84GEO", resCoordType: "WGS84GEO", searchOption: 0,
            }),
            success: function (response) {
                const resultData = response.features;
                const routeCoordinates = resultData
                    .filter(feature => feature.geometry.type === "LineString")
                    .flatMap(feature => feature.geometry.coordinates)
                    .map(coord => new Tmapv2.LatLng(coord[1], coord[0]));

                const routeLayer = new Tmapv2.Polyline({
                    path: routeCoordinates,
                    strokeColor: "#FF0000",
                    strokeWeight: 4,
                    map: map,
                });

                const bounds = new Tmapv2.LatLngBounds();
                routeCoordinates.forEach(coord => bounds.extend(coord));
                map.fitBounds(bounds);

                // 충전소 필터링 및 리스트 표시
                filterChargingStations(routeCoordinates, map, stationListId);
            },
            error: function (error) {
                console.error("경로 탐색 실패:", error);
                alert("경로 탐색 중 오류가 발생했습니다.");
            }
        });
    } catch (error) {
        console.error("경로 계산 오류:", error);
    }
}

// 충전소 필터링 및 리스트 출력
function filterChargingStations(routeCoordinates, map, stationListId) {
    const RADIUS = 0.5; // 반경 500m
    const markers = [];

    const stationsWithDistances = chargingStations.map(station => {
        const minDistance = routeCoordinates.reduce((minDist, coord) => {
            const dist = calculateDistance(coord.lat(), coord.lng(), station.lat, station.lon);
            return Math.min(minDist, dist);
        }, Infinity);
        return { ...station, distance: minDistance };
    });

    const stationsInRadius = stationsWithDistances
        .filter(station => station.distance <= RADIUS)
        .sort((a, b) => a.distance - b.distance);

    displayStations(stationsInRadius, stationListId);
    displayMarkers(stationsInRadius, map, markers); // 마커 표시
}

// 충전소 정보 출력
function displayStations(stations, stationListId) {
    const stationList = document.getElementById(stationListId);
    stationList.innerHTML = stations.map(function(station) {
        return "<li>" + station.name + " - " + station.isFast + " - " + station.priceForMember + " - " + station.priceForNonMember + " - " + station.distance.toFixed(2) + " km</li>";
    }).join("");
}

// 마커 표시
function displayMarkers(stations, map, markers) {
    stations.forEach(station => {
        const marker = new Tmapv2.Marker({
            position: new Tmapv2.LatLng(station.lat, station.lon),
            map: map,
            title: station.name,
        });

        const infoWindow = new Tmapv2.InfoWindow({
            position: marker.getPosition(),
            content: "<div style='padding:5px;'>" + station.name + "</div>",
            visible: false,
        });

        marker.addListener("click", () => {
            infoWindow.setVisible(!infoWindow.getVisible());
        });

        markers.push(marker);
    });
}

// 거리 계산 함수
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // 지구 반지름 (km)
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat / 2) ** 2 + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) ** 2;
    return 2 * R * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}

// 텍스트로 장소 좌표를 가져오는 함수
async function getCoordinatesFromLocation(location) {
    try {
        const response = await fetch(
            `https://apis.openapi.sk.com/tmap/pois?version=1&searchKeyword=${encodeURIComponent(location)}&resCoordType=WGS84GEO&reqCoordType=WGS84GEO&count=1`,
            { headers: { "appKey": TMAP_API_KEY } }
        );
        const data = await response.json();
        if (data.searchPoiInfo.pois.poi.length > 0) {
            const poi = data.searchPoiInfo.pois.poi[0];
            return { lat: parseFloat(poi.frontLat), lon: parseFloat(poi.frontLon) };
        } else {
            return null;
        }
    } catch (error) {
        console.error("좌표 가져오기 실패:", error);
        return null;
    }
}



