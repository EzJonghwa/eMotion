package com.eMotion.team.board.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.eMotion.team.board.service.CommentService;
import com.eMotion.team.board.vo.CommentVO;
import com.eMotion.team.member.vo.MemberVO;

@Controller
@RequestMapping("/comments")
public class CommentController {

    @Autowired
    private CommentService commentService;

    // 댓글 작성
    @PostMapping("/add")
    public String addComment(CommentVO comment, HttpSession session) {
        // 로그인 사용자 확인
        MemberVO loginUser = (MemberVO) session.getAttribute("login");
        if (loginUser == null) {
            return "redirect:/loginView"; // 비회원일 경우 로그인 페이지로 이동
        }
        comment.setEmail(loginUser.getEmail()); // 작성자 이메일 설정
        commentService.addComment(comment); // 댓글 추가
        return "redirect:/board/view?boNo=" + comment.getBoNo();
    }

    // 댓글 수정
    @PostMapping("/update")
    public String updateComment(CommentVO comment, HttpSession session) {
        MemberVO loginUser = (MemberVO) session.getAttribute("login");
        if (loginUser == null || !commentService.isCommentWriter(comment.getCoNo(), loginUser.getEmail())) {
            return "error/unauthorized"; // 권한 없음
        }
        commentService.updateComment(comment);
        return "redirect:/board/view?boNo=" + comment.getBoNo();
    }

    // 댓글 삭제
    @PostMapping("/delete")
    public String deleteComment(@RequestParam int coNo, @RequestParam int boNo, HttpSession session) {
        MemberVO loginUser = (MemberVO) session.getAttribute("login");
        if (loginUser == null || !commentService.isCommentWriter(coNo, loginUser.getEmail())) {
            return "error/unauthorized"; // 권한 없음
        }
        commentService.deleteComment(coNo);
        return "redirect:/board/view?boNo=" + boNo;
    }
}