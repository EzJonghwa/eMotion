<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Routine</title>
<!-- 프레임 워크 jquery and bootStrap-->
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
	crossorigin="anonymous">
<script
	src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
	integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
	crossorigin="anonymous"></script>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css"
	rel="stylesheet">


<!-- 프로그레스 바 스타일 css -->
<!-- 프로그레스 바 스타일 css -->
<style>
.headcss {
	box-shadow: 0px 5px 0px 0px #d6edff;
}

   .btn-primary {
	font-weight:1000;
	background-color: #50B0FF;
	border: none;
  }
  .btn-danger{
    font-weight:1000;
    background-color :#FF4B5D;
    border: none;
  }
  .btn-warning{
    background-color :#ff9c39;
  }
  .btn-danger:hover{
    background-color :#fa1b31;
  }
  .btn-warning:hover{
    background-color :#FF9123;
  }
  .btn-primary:hover {
    background-color: #37a1f8;

  }
.btn.responsive-text {
	font-size: calc(0.8rem + 0.4vw);
	font-weight: 600;
	/* 화면 너비에 비례한 폰트 크기 */
}

.responsive-text {
	font-size: calc(1rem + 0.5vw);
	/* 화면 너비에 비례한 폰트 크기 */
}

.responsive-subtext {
	font-size: calc(1rem + 0.5vw);
	font-weight: 600;
	color: #604616;
	/* 화면 너비에 비례한 폰트 크기 */
}

.responsive-tabletext {
	font-size: calc(0.6rem + 0.5vw);
}

.responsive-input {
	font-size: calc(1rem + 0.5vw);
	height: 7vh;
	/* 화면 너비에 비례한 폰트 크기 */
}

.re_logo {
	font-size: calc(2.5rem + 0.5vw);
	/* 화면 너비에 비례한 폰트 크기 */
	font-weight: 1000;
}

.re_sm_logo {
	font-size: calc(1rem + 0.5vw);
	/* 화면 너비에 비례한 폰트 크기 */
	font-weight: 600;
	color: #828282;
}

.re_exp {
	font-size: calc(1rem + 0.5vw);
	/* 화면 너비에 비례한 폰트 크기 */
	font-weight: 1000;
	text-align: center;
}

.container-sm {
	height: 100%;
}

html, body {
	height: 100%;
}

body {
	display: flex;
	justify-content: center;
	background-color: #B7B7B7;
}

.cont:-webkit-scrollbar {
	display: none;
}

.cont {
	background-color: white;
	width: 768px;
	height: 100%;
	box-shadow: 0 5px 8px rgba(57, 57, 57, 0.16), 0 5px 8px
		rgba(57, 57, 57, 0.16);
	-ms-overflow-style: none;
	/* 인터넷 익스플로러 */
	scrollbar-width: none;
	/* 파이어폭스 */
}

.hidden {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

.liststyle {
	background-color: #d6edff;
	border-radius: 10px;
	cursor: pointer;
	transition-duration: 0.2s;
}

.liststyle:hover {
	transform: scale(0.99);
}

.liststyle-inner {
	background-color: #E9D7B6;
	border-radius: 10px;
	color: #604616; cursor : pointer;
	transition-duration: 0.2s;
	font-weight: 1000;
	cursor: pointer;
}

.liststyle-inner:hover {
	transform: scale(0.99);
}

.img-size {
	width: 100%;
	border-radius: 10px;
}

.progress-container {
	display: flex;
	width: 100%;
	min-height: 10px;
	height: 1.2vh;
	max-height: 12px;
	background-color: #D1D1D1;
	box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
	border-radius: 50px;
	position: relative;
	margin-bottom: 20px;
}

.progress-bar {
	height: 100%;
	border-radius: 50px;
	transition: width 0.5s ease-in-out;
}

.progress-bar:hover {
	opacity: 80%;
}

.progress-bar.left-progress {
	background-color: #83C4FF;
}

.progress-bar.right-progress {
	background-color: #F46C46;
}

.tips {
	position: absolute;
	background-color: #fff;
	padding: 5px 10px;
	border: 1px solid #ccc;
	border-radius: 4px;
	box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
	display: none;
	pointer-events: none;
	z-index: 10;
}

.headfont {
	color: #695B40;
	font-weight: 1000;
}

.headfont.center {
	font-weight: 1000;
	color: #372504;
}
</style>

</head>

<body>
	<div class="cont p-3 overflow-y-auto">

		<div class="headcss p-3 mb-4">
			<div>
				<!-- 제목 -->
				<span><span class="re_logo" style="color: #FFD050;">e</span>
					<span class="re_logo" style="color: #50B0FF;">Motion</span></span> <span
					class="re_sm_logo"> 루틴</span>
			</div>
		</div>
		<div class="maincss px-2 d-flex justify-content-end">
			<!-- 버튼 -->
			<button class=" btn btn-primary responsive-text p-2"
				onclick="location.href='${pageContext.request.contextPath}/routineDetail'">+
				루틴 추가</button>
		</div>

		<!--전기차 테이블-->
		<div class="maincss p-2 overflow-auto">
			<c:if test="${not empty routineList}">
				<c:forEach var="routine" items="${routineList}">
					<div class="fs-4 mb-3 ">
						<div class="d-flex justify-content-between liststyle py-3 px-3 "
							data-bs-toggle="modal"
							data-bs-target="#exampleModal${routine.routineNo}">
							<span>${routine.rouTitle}</span> <span>(${routine.rouDetail})</span>
							<span>(${routine.createDt})</span>
						</div>


					</div>



					<div class="modal fade" id="exampleModal${routine.routineNo}"
						tabindex="-1" aria-labelledby="exampleModalLabel"
						aria-hidden="true">
						<div class="modal-dialog modal-md">
							<div class="modal-content p-4">
								<div class="maincss px-2">
									<div class="row d-flex align-items-start">
										<div class="col">
											<h3>${routine.rouTitle}</h3	>
										</div>
										<div class="col d-flex justify-content-end">
											<button type="button" class="btn-close align-self-center"
												data-bs-dismiss="modal" aria-label="Close"></button>
										</div>
										
									</div>
									<div class="row d-flex">
										
										<input type="hidden" name="email"
											value="${sessionScope.login.email}">
										<div>
											<div class="row p-2" style="text-align: center;">
												<div class="liststyle-inner  p-2">${routine.rouDetail}</div>
											</div>
											<div class="row p-2" style="text-align: center;">
												<div class="liststyle-inner  p-2">${routine.startLoc}</div>
											</div>
											<div class="row p-2" style="text-align: center;">
												<div class="liststyle-inner  p-2">${routine.endLoc}</div>
											</div>
											<div class="row p-2 column-gap-2" style="text-align: center;">
												<div class="col liststyle-inner  p-2">${routine.rouDay}일운행</div>
												<div class="col liststyle-inner  p-2">${routine.totalDis}km</div>
												<div class="col liststyle-inner  p-2">${routine.roundTripYn == 'Y' ? '왕복' : routine.roundTripYn == 'N' ? '편도' : '알 수 없음'}</div>
											</div>
										</div>
										<div>
											<div class="pt-2 my-3"
												style="border-top: 3px #E9D7B6 solid; border-bottom: 3px #E9D7B6 solid;">
												<div class="p-2" id="routine-info-${routine.routineNo}"></div>
											</div>

											<div class="row">
												<div id="progress-chart-eff-${routine.routineNo}"></div>
												<div style=" color:#976200; text-align: center ; font-weight:1000;"
													id="total-dis-${routine.routineNo}"></div>
												<div id="progress-chart-co2-${routine.routineNo}"></div>
												<div style="color:#976200; text-align: center; font-weight:1000"
													id="total-co2-${routine.routineNo}"></div>
												<div id="progress-chart-charge-${routine.routineNo}"></div>
												<div style="color:#976200; text-align: center; font-weight:1000"
													id="total-price-${routine.routineNo}"></div>


												<button class="btn btn-warning w-100  mb-2"
													style="color: white;"
													onclick="location.href='${pageContext.request.contextPath}/routineDetailRewrite?routineNo=${routine.routineNo}'">수정</button>
												<!-- 모달 삭제 -->
												<button class="btn btn-danger w-100  mb-2"
													style="color: white;"
													onclick="deleteRoutine(${routine.routineNo})">삭제</button>

											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

				</c:forEach>

			</c:if>

			<c:if test="${empty routineList}">
				<li class="liststyle fs-4 my-2 p-2"><span>루틴이없습니다</span></li>
			</c:if>

		</div>


	</div>
	<!-- 모달 삭제 script -->

	<script>
	function deleteRoutine(routineNo) {
	    if (confirm("정말로 삭제하시겠습니까?")) {
	        var email = '${sessionScope.login.email}';  // 로그인한 사용자의 이메일

	        // AJAX 요청
	        $.ajax({
	            type: "POST",
	            url: "${pageContext.request.contextPath}/routinedeleteDo/" + routineNo,
	            data: { email: email },  // 이메일을 파라미터로 전송
	            success: function (response) {
	                if (response === "Routine deleted successfully using POST.") {
	                    alert("루틴이 삭제되었습니다.");
	                    window.location.reload();
	                    // DOM에서 삭제
	                    document.getElementById(`exampleModal${routineNo}`).remove(); // 모달 삭제
	                    const routineElement = document.querySelector(`[data-bs-target="#exampleModal${routineNo}"]`);
	                    if (routineElement) {
	                        routineElement.parentElement.remove(); // 리스트 삭제
	                    }
	                } else {
	                    alert("삭제 중 오류가 발생했습니다.");
	                }
	            },
	            error: function () {
	                alert("서버 요청 중 오류가 발생했습니다.");
	            }
	        });
	    }
	}
	// 포로그레스 바 스클립트
	  function createProgressBar(containerId, LMax, RMax, leftValue, rightValue, text) {

	  var progressMain = document.getElementById(containerId);
	  
	  progressMain.innerHTML += '<div class="d-flex justify-content-between">' +
	                            '<h4 class="headfont">'+ LMax +'</h4><h4 class="headfont center">'+ text +'</h4><h4 class="headfont">'+ RMax +'</h4>' +
	                            '</div>' +
	                            '<div class="row">' +
	                            '<div class="col">' +
	                            '<div class="progress-container justify-content-end" id="left-container'+containerId+'">' +
	                            '</div>' +
	                            '</div>' +
	                            '<div class="col">' +
	                            '<div class="progress-container justify-content-start" id="right-container'+containerId+'">' +
	                            '</div>' +
	                            '</div>' +
	                            '</div>';

	  var leftContainer = document.getElementById("left-container" + containerId);
	  var rightContainer = document.getElementById("right-container" + containerId);

	  // 좌측, 우측 프로그래스 바 추가
	  leftContainer.innerHTML += '<div class="progress-bar left-progress" id="left-progress' + containerId + '" data-value="' + leftValue + '"></div><div class="tips" id="tips-left' + containerId + '"></div>';
	  rightContainer.innerHTML += '<div class="progress-bar right-progress" id="right-progress' + containerId + '" data-value="' + rightValue + '"></div><div class="tips" id="tips-right' + containerId + '"></div>';

	  // 새로 추가된 요소 가져오기
	  var leftProgressBar = document.getElementById("left-progress" + containerId);
	  var rightProgressBar = document.getElementById("right-progress" + containerId);

	  // 프로그래스 바의 너비 설정
	  leftProgressBar.style.width = (leftValue / LMax) * 100 + "%";
	  rightProgressBar.style.width = (rightValue / RMax) * 100 + "%";

	  var tipsLeft = document.getElementById("tips-left" + containerId);
	  var tipsRight = document.getElementById("tips-right" + containerId);

	  // 툴팁 표시 함수
	  function showTooltip(event, tips, value, isReversed = false) {
	    var containerRect = event.target.parentElement.getBoundingClientRect();
	    tips.style.display = "block";
	    tips.textContent = value;

	    // 위치 계산
	    var tooltipX = isReversed
	      ? containerRect.right - event.clientX // 오른쪽부터 채워지는 경우
	      : event.clientX - containerRect.left;

	    tips.style.left = tooltipX + "px";
	    tips.style.top = "-40px";
	  }

	  // 툴팁 숨기기 함수
	  function hideTooltip(tips) {
	    tips.style.display = "none";
	  }

	  // 좌측 프로그래스 바 이벤트
	  leftProgressBar.addEventListener("mousemove", function (event) {
	    showTooltip(event, tipsLeft, leftProgressBar.getAttribute("data-value"));
	  });

	  leftProgressBar.addEventListener("mouseleave", function () {
	    hideTooltip(tipsLeft);
	  });

	  // 우측 프로그래스 바 이벤트
	  rightProgressBar.addEventListener("mousemove", function (event) {
	    showTooltip(event, tipsRight, rightProgressBar.getAttribute("data-value"));
	  });

	  rightProgressBar.addEventListener("mouseleave", function () {
	    hideTooltip(tipsRight);
	  });
	}
	</script>
	<script>
document.addEventListener("DOMContentLoaded", function () {
    // 루틴 목록을 순회하며 각 차량의 정보 출력
    <c:forEach var="routine" items="${routineList}">
        <c:forEach var="gascar" items="${GascarList}">
            <c:if test="${routine.routineNo == gascar.routineNo && routine.gasCar == gascar.carName}">
            	var gasCarImg = '${gascar.carImg}';
            	var gasCarEff = Math.round(parseFloat('${gascar.carEff}') * 100) / 100; // 내연기관 차의 연비 (소수점 2자리 반올림)
            	var gasCarCo2 = Math.round(parseFloat('${gascar.carCo2}') * 100) / 10000; // 내연기관 차의 탄소배출량 (소수점 2자리 반올림)
                var gasCarBrand = '${gascar.carBrand}'; // 내연기관 차의 브랜드
                var gasCarName = '${gascar.carName}'; // 내연기관 차의 이름
                var gasCarCate = '${gascar.carCate}'; // 내연기관 차의 종류
                var gasCarPrice = '${gascar.carprice}'; // 내연기관차 가격
                var gasCarCateDetail = '${gascar.carCateDetail}'; // 내연기관 차의 상세 종류
            </c:if>
        </c:forEach>

        <c:forEach var="eleccar" items="${EleccarList}">
            <c:if test="${routine.routineNo == eleccar.routineNo && routine.eleCar == eleccar.carname}">
            	var eleCarImg = '${eleccar.imgUrl}';
            	var eleCarMpge = Math.round(parseFloat('${eleccar.carMpge}') * 100) / 100; // 내연기관 차의 연비 (소수점 2자리 반올림)
            	var eleCarEff = Math.round(parseFloat(eleCarMpge * 8.8 *0.85) * 100) / 100; // 내연기관 차의 연비 (소수점 2자리 반올림)
            	var eleCarCo2 = Math.round(parseFloat('${eleccar.carCo2}') * 100) / 10000; // 전기차의 탄소배출량 (소수점 2자리 반올림)
                var eleCarBrand = '${eleccar.carbrand}'; // 전기차 브랜드
                var eleCarName = '${eleccar.carname}'; // 전기차 이름
                var eleCarPrice = '${eleccar.carprice}'; // 전기차 가격
                var eleCarCate = '${eleccar.carcate}'; // 전기차 종류
                var eleCarCateDetail = '${eleccar.carcatedetail}'; // 전기차 상세 종류

                // 연비와 탄소배출량의 차이를 계산
                var efficiencyDifference =  Math.round(Math.abs(gasCarEff - eleCarEff)* 100) / 100;
                var totalgasCarCo2 = Math.round(gasCarCo2 * '${routine.totalDis}' * '${routine.rouDay}' * 100) / 100;
                var totaleleCarCo2 = Math.round(eleCarCo2 * '${routine.totalDis}' * '${routine.rouDay}' * 100) / 100;
                var co2Difference = Math.round(Math.abs(gasCarCo2 - eleCarCo2)* 100) / 100;
                var gastotalco2 = Math.round(gasCarCo2 * efficiencyDifference * '${routine.rouDay}');
                var electotalco2 = Math.round(eleCarCo2 * efficiencyDifference * '${routine.rouDay}');
                var totalDis = Math.round('${routine.totalDis}' * '${routine.rouDay}'* 100) / 100;
                var totalco2Dis = Math.round(('${routine.totalDis}' * co2Difference) * '${routine.rouDay}'* 100) / 100;
                var minCareff = '${maxData.minCareff}';
                var maxCareff = '${maxData.maxCareff}';
                var maxCarCO2 = '${maxData.maxCarCO2}'/100;
                var maxtotlaCarCO2 = Math.round(maxCarCO2 * '${routine.totalDis}' * '${routine.rouDay}' * 100) / 100;
                
                // 충전 / 주유비 하드코딩
                var oilprice = 1650;
                var chargeprice = 650;
                var totaloilprice = Math.round((totalDis / gasCarEff)  * oilprice);
                var totalchargeprice = Math.round((totalDis / eleCarEff) * chargeprice);
                var totalmaxoilprice = Math.round((totalDis / minCareff ) * oilprice)
                
             	// 만약 roundTripYn이 Y라면 값 두 배로 계산
                if ('${routine.roundTripYn}' === 'Y') {
                	totalgasCarCo2 *= 2;
                	totaleleCarCo2 *= 2;
                	totalDis *= 2;
                    totalco2Dis *= 2;
                    totaloilprice *= 2;
                    totalchargeprice *= 2;
                }
                // 해당 값을 HTML로 출력
                var routineElement = document.getElementById('routine-info-${routine.routineNo}');
                routineElement.innerHTML += 
                	'<div class="row d-flex align-items-center">' +
	                    '<div class="col img-container">' +
		                    '<img class="img-size" src="' + gasCarImg + '">' +
		                '</div>' +
		                '<div class="col img-container">' +
		                    '<img class="img-size" src="/assets/img/elec_car_img/' + eleCarImg + '">' +
	                    '</div>' +
                    '</div>' +
                    '<div class="row" style="color:#604616; font-weight:1000;">' +
                        '<div class="col">' +  '<p>' + gasCarName  + '</p>' + '</div>' +
                        '<div class="col">' +  '<p>' + eleCarName  + '</p>' + '</div>' +
                    '</div>' +   
                    
                    '<div class="row" style="color:#976200; font-weight:1000;">' +
	                    '<div class="col">' + '<p>~' + gasCarPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '원</p>' + '</div>' +
	                    '<div class="col">' + '<p>~' + eleCarPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')  + '원</p>' + '</div>' +
                	'</div>' +   

                    '<div class="row" style="color:#372504; font-weight:1000;">' +
	                    '<div class="col">' + '<p>' + gasCarBrand + '</p>' + '</div>' +
	                    '<div class="col">' + '<p>' + eleCarBrand + '</p>' + '</div>' +
                	'</div>' +
                    '<div class="row" style="color:#372504; font-weight:1000;">' +
	                    '<div class="col">' + '<p>' + gasCarCate + ' (' + gasCarCateDetail + ')</p>' + '</div>' +
	                    '<div class="col">' + '<p>' + eleCarCate + ' (' + eleCarCateDetail + ')</p>' + '</div>' +
                    '</div>';
                    
                    var totalcount1 = document.getElementById('total-dis-${routine.routineNo}');
                    totalcount1.innerHTML += 
                    '<div class="row" style="color:#372504">' +
	                    '<div class="col">' + '<p>' + gasCarEff + ' km/L</p> ' + '</div>' +
	                    '<div class="col">' + '<p>' + eleCarEff + ' km/L</p> ' + '</div>' +
                    '</div>';
                    
                    
                    var totalcount2 = document.getElementById('total-co2-${routine.routineNo}');
                    totalcount2.innerHTML += 
                    '<div class="row" style="color:#372504">' + 
                    '<div class="col">' + '<p>' + totalgasCarCo2 + 'g/km </p>' + '</div>' +
                    '<div class="col">' + '<p>' + totaleleCarCo2 + 'g/km</p>' + '</div>' +
                    '</div>';
                    
                    
                    var totalcount3 = document.getElementById('total-price-${routine.routineNo}');
                    totalcount3.innerHTML += 
                    '<div class="row" style="color:#372504">' +
                    '<div class="col">' + '<p>총 주유비 : ' + totaloilprice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '원 </p>' + '</div>' +
                    '<div class="col">' + '<p>총 충전비 : ' + totalchargeprice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '원</p>' + '</div>' +
                	'</div>';
                	
        
                //프로그레스 바 만들기//
               createProgressBar(
			      containerIdcontainerId ="progress-chart-eff-${routine.routineNo}", 
			      LMax = maxCareff, 
			     RMax = maxCareff, 
			        leftValue =  gasCarEff , 
			    rightValue = eleCarEff, 
			     text = '연비'
      			);
              createProgressBar(
    		       containerIdcontainerId ="progress-chart-co2-${routine.routineNo}", 
    		       LMax = maxtotlaCarCO2, 
    		       RMax = maxtotlaCarCO2, 
    		       leftValue =  totalgasCarCo2 , 
    		       rightValue = totaleleCarCo2, 
    		       text = '탄소배출'
          		);
              createProgressBar(
    		        containerIdcontainerId ="progress-chart-charge-${routine.routineNo}", 
    		        LMax = totalmaxoilprice, 
    		        RMax = totalmaxoilprice, 
    		        leftValue = totaloilprice , 
    		        rightValue = totalchargeprice, 
    		        text = '주유비/충전비'
          		);
            </c:if>
            
        </c:forEach>
       
       
    </c:forEach>
});

</script>





</body>

</html>

