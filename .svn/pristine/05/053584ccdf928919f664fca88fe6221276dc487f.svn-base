package com.eMotion.team.board.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestParam;


import com.eMotion.team.board.service.BoardService;
import com.eMotion.team.board.service.CommentService;
import com.eMotion.team.board.vo.BoardSearchVO;
import com.eMotion.team.board.vo.BoardVO;
import com.eMotion.team.member.vo.MemberVO;

@Controller
@RequestMapping("/board")
public class BoardController {

	   @Autowired
	    private BoardService boardService;
	   @Autowired
	   	private CommentService commentService;

	    // 게시판 리스트 화면 매핑
	    @GetMapping("/list")
	    public String getBoardList(@RequestParam(required = false) String searchType,
	                               @RequestParam(required = false) String searchWord,
	                               @RequestParam(defaultValue = "1") int page,
	                               Model model) {
	        int pageSize = 10; // 페이지당 항목 수
	        int firstRow = (page - 1) * pageSize + 1;
	        int lastRow = page * pageSize;

	        // 검색 및 페이징 정보 설정
	        BoardSearchVO searchVO = new BoardSearchVO();
	        searchVO.setSearchType(searchType);
	        searchVO.setSearchWord(searchWord);
	        searchVO.setFirstRow(firstRow);
	        searchVO.setLastRow(lastRow);

	        // 게시판 데이터를 모델에 추가
	        model.addAttribute("boardList", boardService.getBoardList(searchVO));
	        model.addAttribute("totalRows", boardService.getTotalRowCount(searchVO));
	        model.addAttribute("currentPage", page);
	        model.addAttribute("pageSize", pageSize);

	        return "board/boardList";
	    }

	    // 게시글 상세보기 화면 매핑
	    @GetMapping("/view")
	    public String getBoardDetail(@RequestParam(value = "boNo", required = false, defaultValue = "0") int boNo, Model model) {
	        if (boNo == 0) {
	            // boNo가 없는 경우 처리 로직 (예: 에러 페이지 반환)
	            return "errorPage";
	        }
	        model.addAttribute("board", boardService.getBoard(boNo));
	        model.addAttribute("prevPost", boardService.getPrevPost(boNo)); // 이전 글
	        model.addAttribute("nextPost", boardService.getNextPost(boNo)); // 다음 글
	        model.addAttribute("commentList", commentService.getCommentsByBoNo(boNo)); // 댓글 목록 추가
	        boardService.increaseHit(boNo); // 조회수 증가
	        return "board/boardView";
	    }

	    @GetMapping("/form")
	    public String boardForm() {
	        return "board/boardForm"; // 글 작성
	    }
	    
	    @PostMapping("/recommend")
	    public ResponseEntity<?> toggleRecommend(@RequestParam int boNo, HttpSession session) {
	        // 세션에서 로그인 사용자 정보 확인
	        MemberVO loginUser = (MemberVO) session.getAttribute("login");
	        if (loginUser == null) {
	            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("비회원은 추천할 수 없습니다.");
	        }

	        try {
	            String email = loginUser.getEmail();
	            boardService.toggleRecommend(boNo, email);
	            return ResponseEntity.ok().body("추천 처리 완료");
	        } catch (RuntimeException e) {
	            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
	        }
	    }
	    @PostMapping("/update")
	    public String updateBoard(BoardVO boardVO, HttpSession session) {
	        // 현재 로그인한 사용자 정보 가져오기
	        MemberVO loginUser = (MemberVO) session.getAttribute("login"); 
	        if (loginUser == null || !boardVO.getEmail().equals(loginUser.getEmail())) {
	            // 비회원이거나 작성자가 아닐 경우
	            return "error/unauthorized"; // 권한 없음 페이지로 리다이렉트
	        }
	        boardService.updateBoard(boardVO); // 게시글 수정
	        return "redirect:/board/view?boNo=" + boardVO.getBoNo();
	    }

	    @PostMapping("/delete")
	    public String deleteBoard(@RequestParam int boNo, HttpSession session) {
	        // 현재 로그인한 사용자 정보 가져오기
	        MemberVO loginUser = (MemberVO) session.getAttribute("login"); 
	        BoardVO board = boardService.getBoard(boNo); // 게시글 정보 가져오기
	        if (loginUser == null || !board.getEmail().equals(loginUser.getEmail())) {
	            // 비회원이거나 작성자가 아닐 경우
	            return "error/unauthorized"; // 권한 없음 페이지로 리다이렉트
	        }
	        boardService.deleteBoard(boNo); // 게시글 삭제
	        return "redirect:/board/list";
	    }



	}
