package com.eMotion.team.recommend.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.ibatis.javassist.compiler.ast.Keyword;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.eMotion.team.recommend.service.FilterServiceImpl;
import com.eMotion.team.recommend.service.RecommendServiceImpl;
import com.eMotion.team.recommend.vo.FilterVO;
import com.eMotion.team.recommend.vo.RecommendVO;
import com.eMotion.team.recommend.vo.SearchVO;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
public class RecommendController {

	@Autowired
	RecommendServiceImpl recoService;
	@Autowired
	FilterServiceImpl filterService;

	//차종 필터 불러오기
	@GetMapping("/filter")
	public String showCate(Model model) {
		ArrayList<FilterVO> passCateVO = filterService.getPassengerCate();
		ArrayList<FilterVO> freiCateVO = filterService.getFreightCate();
		ArrayList<FilterVO> vansCateVO = filterService.getVansCate();
		ArrayList<FilterVO> motoCateVO = filterService.getMotorsCate();

		model.addAttribute("passCate", passCateVO);
		model.addAttribute("freiCate", freiCateVO);
		model.addAttribute("vansCate", vansCateVO);
		model.addAttribute("motoCate", motoCateVO);

		return "recommend/filterView";
	}

	//브랜드 불러오고 검색하기
	@GetMapping("/filter/updateSelected") 
	public ResponseEntity<?> searchCarBrand(@RequestParam(value = "keyword", required = false) String keyword,
											@ModelAttribute("searchVO") SearchVO searchVO, 
											Model model) {
		try {
			searchVO.setKeyword(keyword);
			ArrayList<FilterVO> result = filterService.searchCarBrand(keyword);
			model.addAttribute("carBrandList", result);
			//System.out.println(result);
			
			return ResponseEntity.ok(result); // JSON 응답
		
		} catch (Exception e) { 
			e.printStackTrace(); 
			
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error processing request"); } }

	// 카테고리 선택 시 건 수가 실시간으로 반영되도록	
	@PostMapping("/filter/updateSelected") 
	public ResponseEntity<Map<String, Object>> updateSelected(@RequestBody SearchVO selectedData,
												 @ModelAttribute("searchVO") SearchVO searchVO, 
												 Model model) {
		ArrayList<String> selectedCates = selectedData.getSelectedCates();
		ArrayList<String> selectedBrands = selectedData.getSelectedBrands();
		int selectedMinCarPrice = selectedData.getSelectedMinCarPrice();
		int selectedMaxCarPrice = selectedData.getSelectedMaxCarPrice();
		ArrayList<String> selectedSubYN = selectedData.getSelectedSubYN();
		System.out.println("선택된 카테고리: " + selectedCates);
		System.out.println("선택된 브랜드: " + selectedBrands);
		System.out.println("선택된 최소예산: " + selectedMinCarPrice);
		System.out.println("선택된 최대예산: " + selectedMaxCarPrice);
		System.out.println("선택된 보조금여부: " + selectedSubYN);
		
		searchVO.setSelectedCates(selectedCates);
		searchVO.setSelectedBrands(selectedBrands);
		searchVO.setSelectedMinCarPrice(selectedMinCarPrice);
		searchVO.setSelectedMaxCarPrice(selectedMaxCarPrice);
		searchVO.setSelectedSubYN(selectedSubYN);
		
		int nowCount = recoService.getCount(searchVO); 
		System.out.print("현재 검색된 건 수: "); System.out.println(nowCount);
		  // Creating a response map
	    Map<String, Object> responseMap = new HashMap<>();
	    responseMap.put("nowCount", nowCount);
		model.addAttribute("nowCount", nowCount); 
		model.addAttribute("selectedCate", selectedCates); 
		model.addAttribute("selectedBr", selectedBrands);
		model.addAttribute("selectedMinCarPrice", selectedMinCarPrice);
		model.addAttribute("selectedMaxCarPrice", selectedMaxCarPrice);
		model.addAttribute("selectedSubYN", selectedSubYN);
		
		return ResponseEntity.ok(responseMap); 
	}
	
	
	// 최종선택완료 후 불러오는 차량데이터
	@PostMapping("/getSelect")
	public String getSelect(@ModelAttribute("searchVO") SearchVO searchVO,
							Model model) {
		System.out.println(searchVO);
		ArrayList<RecommendVO> carList = recoService.getFilteredList(searchVO);
		System.out.println(carList);
		int resultCount = recoService.getCount(searchVO);
		System.out.println(resultCount);
		
		model.addAttribute("details", carList);
		
		
		
		return "/recommend/filteredListView";
	}	


}